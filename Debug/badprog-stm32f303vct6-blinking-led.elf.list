
badprog-stm32f303vct6-blinking-led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010c8  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08001250  08001250  00009250  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800132c  0800132c  0000932c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001330  08001330  00009330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001334  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000004  20000004  00010004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000024  20000024  00010004  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00010004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00004a65  00000000  00000000  00010034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000e3f  00000000  00000000  00014a99  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000002f0  00000000  00000000  000158d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000470  00000000  00000000  00015bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001dff  00000000  00000000  00016038  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000012af  00000000  00000000  00017e37  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000082  00000000  00000000  000190e6  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000644  00000000  00000000  00019168  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00001824  00000000  00000000  000197ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001238 	.word	0x08001238

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001238 	.word	0x08001238
 80001c4:	20000008 	.word	0x20000008

080001c8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80001c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80001ca:	f000 ff8f 	bl	80010ec <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80001ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 80001d2:	f000 bf62 	b.w	800109a <HAL_SYSTICK_IRQHandler>
	...

080001d8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80001d8:	4b17      	ldr	r3, [pc, #92]	; (8000238 <HAL_MspInit+0x60>)

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80001da:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80001dc:	699a      	ldr	r2, [r3, #24]
 80001de:	f042 0201 	orr.w	r2, r2, #1
 80001e2:	619a      	str	r2, [r3, #24]
 80001e4:	699b      	ldr	r3, [r3, #24]
 80001e6:	f003 0301 	and.w	r3, r3, #1
 80001ea:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001ec:	2003      	movs	r0, #3
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80001ee:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001f0:	f000 fec6 	bl	8000f80 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80001f4:	2100      	movs	r1, #0
 80001f6:	460a      	mov	r2, r1
 80001f8:	f06f 000b 	mvn.w	r0, #11
 80001fc:	f000 fedc 	bl	8000fb8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000200:	2100      	movs	r1, #0
 8000202:	460a      	mov	r2, r1
 8000204:	f06f 000a 	mvn.w	r0, #10
 8000208:	f000 fed6 	bl	8000fb8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800020c:	2100      	movs	r1, #0
 800020e:	460a      	mov	r2, r1
 8000210:	f06f 0009 	mvn.w	r0, #9
 8000214:	f000 fed0 	bl	8000fb8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000218:	2100      	movs	r1, #0
 800021a:	460a      	mov	r2, r1
 800021c:	f06f 0003 	mvn.w	r0, #3
 8000220:	f000 feca 	bl	8000fb8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000224:	2100      	movs	r1, #0
 8000226:	f04f 30ff 	mov.w	r0, #4294967295
 800022a:	460a      	mov	r2, r1
 800022c:	f000 fec4 	bl	8000fb8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000230:	b003      	add	sp, #12
 8000232:	f85d fb04 	ldr.w	pc, [sp], #4
 8000236:	bf00      	nop
 8000238:	40021000 	.word	0x40021000

0800023c <badprog_gpio>:
 * or an I2C pin.
 * In this configuration, the mode has to be set as GPIO_MODE_AF_xx.
 * But in this example, we won't change anything, because we just want to blink
 * some LEDs.
 */
void badprog_gpio() {
 800023c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOE_CLK_ENABLE()
 800023e:	4b0d      	ldr	r3, [pc, #52]	; (8000274 <badprog_gpio+0x38>)
  GPIO_InitStruct.Alternate = 0; //
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pin = MY_PINS;              // set all pins needed
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000240:	480d      	ldr	r0, [pc, #52]	; (8000278 <badprog_gpio+0x3c>)
 */
void badprog_gpio() {

  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOE_CLK_ENABLE()
 8000242:	695a      	ldr	r2, [r3, #20]
 8000244:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000248:	615a      	str	r2, [r3, #20]
 800024a:	695b      	ldr	r3, [r3, #20]
 800024c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000250:	9300      	str	r3, [sp, #0]
  ;
  GPIO_InitStruct.Alternate = 0; //
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000252:	2201      	movs	r2, #1
 */
void badprog_gpio() {

  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOE_CLK_ENABLE()
 8000254:	9b00      	ldr	r3, [sp, #0]
  ;
  GPIO_InitStruct.Alternate = 0; //
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000256:	9202      	str	r2, [sp, #8]

  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOE_CLK_ENABLE()
  ;
  GPIO_InitStruct.Alternate = 0; //
 8000258:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pin = MY_PINS;              // set all pins needed
 800025a:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800025e:	a901      	add	r1, sp, #4

  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOE_CLK_ENABLE()
  ;
  GPIO_InitStruct.Alternate = 0; //
 8000260:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pin = MY_PINS;              // set all pins needed
 8000262:	9201      	str	r2, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000264:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000266:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000268:	f000 fd58 	bl	8000d1c <HAL_GPIO_Init>

}
 800026c:	b007      	add	sp, #28
 800026e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000272:	bf00      	nop
 8000274:	40021000 	.word	0x40021000
 8000278:	48001000 	.word	0x48001000

0800027c <SystemClock_Config>:
  }
}

/** System Clock Configuration
 */
void SystemClock_Config(void) {
 800027c:	b570      	push	{r4, r5, r6, lr}
 800027e:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000280:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000282:	2400      	movs	r4, #0
void SystemClock_Config(void) {

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000284:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000286:	2601      	movs	r6, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000288:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800028a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800028c:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8000290:	930f      	str	r3, [sp, #60]	; 0x3c
void SystemClock_Config(void) {

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000292:	9506      	str	r5, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000294:	960a      	str	r6, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000296:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000298:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800029a:	f000 f835 	bl	8000308 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800029e:	230f      	movs	r3, #15
      | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 80002a0:	4631      	mov	r1, r6
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80002a2:	9301      	str	r3, [sp, #4]
      | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 80002a4:	a801      	add	r0, sp, #4

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
      | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002aa:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
      | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ac:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ae:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b0:	9405      	str	r4, [sp, #20]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 80002b2:	f000 fb59 	bl	8000968 <HAL_RCC_ClockConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 80002b6:	f000 fd17 	bl	8000ce8 <HAL_RCC_GetHCLKFreq>
 80002ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002be:	fbb0 f0f3 	udiv	r0, r0, r3
 80002c2:	f000 febb 	bl	800103c <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80002c6:	2004      	movs	r0, #4
 80002c8:	f000 fece 	bl	8001068 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80002cc:	f04f 30ff 	mov.w	r0, #4294967295
 80002d0:	4621      	mov	r1, r4
 80002d2:	4622      	mov	r2, r4
 80002d4:	f000 fe70 	bl	8000fb8 <HAL_NVIC_SetPriority>
}
 80002d8:	b010      	add	sp, #64	; 0x40
 80002da:	bd70      	pop	{r4, r5, r6, pc}

080002dc <main>:
}

/**
 * Main, the famous one!
 */
int main(void) {
 80002dc:	b508      	push	{r3, lr}
  HAL_Init();
 80002de:	f000 fef3 	bl	80010c8 <HAL_Init>
  SystemClock_Config();
 80002e2:	f7ff ffcb 	bl	800027c <SystemClock_Config>
  badprog_gpio();
 80002e6:	f7ff ffa9 	bl	800023c <badprog_gpio>
  while (1) {
    GPIOE->ODR ^= MY_PINS;    // let's blink
 80002ea:	4b05      	ldr	r3, [pc, #20]	; (8000300 <main+0x24>)
 80002ec:	695a      	ldr	r2, [r3, #20]
 80002ee:	f482 6270 	eor.w	r2, r2, #3840	; 0xf00
 80002f2:	615a      	str	r2, [r3, #20]
    HAL_Delay(1000);
 80002f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002f8:	f000 ff06 	bl	8001108 <HAL_Delay>
 80002fc:	e7f5      	b.n	80002ea <main+0xe>
 80002fe:	bf00      	nop
 8000300:	48001000 	.word	0x48001000

08000304 <assert_failed>:
 * where the assert_param error has occurred.
 * @param file: pointer to the source file name
 * @param line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t* file, uint32_t line) {
 8000304:	4770      	bx	lr
	...

08000308 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000308:	b573      	push	{r0, r1, r4, r5, r6, lr}
   uint32_t tickstart = 0;
  
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
 800030a:	4604      	mov	r4, r0
 800030c:	b920      	cbnz	r0, 8000318 <HAL_RCC_OscConfig+0x10>
 800030e:	48a6      	ldr	r0, [pc, #664]	; (80005a8 <HAL_RCC_OscConfig+0x2a0>)
 8000310:	f240 110b 	movw	r1, #267	; 0x10b
 8000314:	f7ff fff6 	bl	8000304 <assert_failed>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8000318:	6823      	ldr	r3, [r4, #0]
 800031a:	b133      	cbz	r3, 800032a <HAL_RCC_OscConfig+0x22>
 800031c:	071b      	lsls	r3, r3, #28
 800031e:	d104      	bne.n	800032a <HAL_RCC_OscConfig+0x22>
 8000320:	48a1      	ldr	r0, [pc, #644]	; (80005a8 <HAL_RCC_OscConfig+0x2a0>)
 8000322:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8000326:	f7ff ffed 	bl	8000304 <assert_failed>
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800032a:	6823      	ldr	r3, [r4, #0]
 800032c:	07de      	lsls	r6, r3, #31
 800032e:	d404      	bmi.n	800033a <HAL_RCC_OscConfig+0x32>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000330:	6823      	ldr	r3, [r4, #0]
 8000332:	079d      	lsls	r5, r3, #30
 8000334:	f100 80a8 	bmi.w	8000488 <HAL_RCC_OscConfig+0x180>
 8000338:	e12e      	b.n	8000598 <HAL_RCC_OscConfig+0x290>
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800033a:	6863      	ldr	r3, [r4, #4]
 800033c:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 8000340:	d007      	beq.n	8000352 <HAL_RCC_OscConfig+0x4a>
 8000342:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000346:	d004      	beq.n	8000352 <HAL_RCC_OscConfig+0x4a>
 8000348:	4897      	ldr	r0, [pc, #604]	; (80005a8 <HAL_RCC_OscConfig+0x2a0>)
 800034a:	f44f 7189 	mov.w	r1, #274	; 0x112
 800034e:	f7ff ffd9 	bl	8000304 <assert_failed>
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000352:	4d96      	ldr	r5, [pc, #600]	; (80005ac <HAL_RCC_OscConfig+0x2a4>)
 8000354:	686b      	ldr	r3, [r5, #4]
 8000356:	f003 030c 	and.w	r3, r3, #12
 800035a:	2b04      	cmp	r3, #4
 800035c:	d007      	beq.n	800036e <HAL_RCC_OscConfig+0x66>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800035e:	686b      	ldr	r3, [r5, #4]
 8000360:	f003 030c 	and.w	r3, r3, #12
 8000364:	2b08      	cmp	r3, #8
 8000366:	d118      	bne.n	800039a <HAL_RCC_OscConfig+0x92>
 8000368:	686b      	ldr	r3, [r5, #4]
 800036a:	03d8      	lsls	r0, r3, #15
 800036c:	d515      	bpl.n	800039a <HAL_RCC_OscConfig+0x92>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800036e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000372:	fa93 f3a3 	rbit	r3, r3
 8000376:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800037a:	682a      	ldr	r2, [r5, #0]
 800037c:	fa93 f3a3 	rbit	r3, r3
 8000380:	fab3 f383 	clz	r3, r3
 8000384:	f003 031f 	and.w	r3, r3, #31
 8000388:	fa22 f303 	lsr.w	r3, r2, r3
 800038c:	07d9      	lsls	r1, r3, #31
 800038e:	d5cf      	bpl.n	8000330 <HAL_RCC_OscConfig+0x28>
 8000390:	6863      	ldr	r3, [r4, #4]
 8000392:	2b00      	cmp	r3, #0
 8000394:	d1cc      	bne.n	8000330 <HAL_RCC_OscConfig+0x28>
      {
        return HAL_ERROR;
 8000396:	2001      	movs	r0, #1
 8000398:	e2e4      	b.n	8000964 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 800039a:	682b      	ldr	r3, [r5, #0]
 800039c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003a0:	602b      	str	r3, [r5, #0]
 80003a2:	682b      	ldr	r3, [r5, #0]
 80003a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003a8:	602b      	str	r3, [r5, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80003aa:	f000 fea7 	bl	80010fc <HAL_GetTick>
 80003ae:	4606      	mov	r6, r0
 80003b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80003b4:	fa93 f3a3 	rbit	r3, r3
 80003b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80003bc:	682a      	ldr	r2, [r5, #0]
 80003be:	fa93 f3a3 	rbit	r3, r3
 80003c2:	fab3 f383 	clz	r3, r3
 80003c6:	f003 031f 	and.w	r3, r3, #31
 80003ca:	fa22 f303 	lsr.w	r3, r2, r3
 80003ce:	07da      	lsls	r2, r3, #31
 80003d0:	d506      	bpl.n	80003e0 <HAL_RCC_OscConfig+0xd8>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80003d2:	f000 fe93 	bl	80010fc <HAL_GetTick>
 80003d6:	1b80      	subs	r0, r0, r6
 80003d8:	2864      	cmp	r0, #100	; 0x64
 80003da:	d9e9      	bls.n	80003b0 <HAL_RCC_OscConfig+0xa8>
        {
          return HAL_TIMEOUT;
 80003dc:	2003      	movs	r0, #3
 80003de:	e2c1      	b.n	8000964 <HAL_RCC_OscConfig+0x65c>
        }
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80003e0:	6863      	ldr	r3, [r4, #4]
 80003e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80003e6:	d007      	beq.n	80003f8 <HAL_RCC_OscConfig+0xf0>
 80003e8:	682a      	ldr	r2, [r5, #0]
 80003ea:	b14b      	cbz	r3, 8000400 <HAL_RCC_OscConfig+0xf8>
 80003ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80003f0:	d106      	bne.n	8000400 <HAL_RCC_OscConfig+0xf8>
 80003f2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80003f6:	602a      	str	r2, [r5, #0]
 80003f8:	682a      	ldr	r2, [r5, #0]
 80003fa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80003fe:	e005      	b.n	800040c <HAL_RCC_OscConfig+0x104>
 8000400:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000404:	602a      	str	r2, [r5, #0]
 8000406:	682a      	ldr	r2, [r5, #0]
 8000408:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800040c:	602a      	str	r2, [r5, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800040e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8000410:	68a2      	ldr	r2, [r4, #8]
 8000412:	f021 010f 	bic.w	r1, r1, #15
 8000416:	430a      	orrs	r2, r1
 8000418:	62ea      	str	r2, [r5, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800041a:	b1d3      	cbz	r3, 8000452 <HAL_RCC_OscConfig+0x14a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800041c:	f000 fe6e 	bl	80010fc <HAL_GetTick>
 8000420:	4606      	mov	r6, r0
 8000422:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000426:	fa93 f3a3 	rbit	r3, r3
 800042a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800042e:	682a      	ldr	r2, [r5, #0]
 8000430:	fa93 f3a3 	rbit	r3, r3
 8000434:	fab3 f383 	clz	r3, r3
 8000438:	f003 031f 	and.w	r3, r3, #31
 800043c:	fa22 f303 	lsr.w	r3, r2, r3
 8000440:	07db      	lsls	r3, r3, #31
 8000442:	f53f af75 	bmi.w	8000330 <HAL_RCC_OscConfig+0x28>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000446:	f000 fe59 	bl	80010fc <HAL_GetTick>
 800044a:	1b80      	subs	r0, r0, r6
 800044c:	2864      	cmp	r0, #100	; 0x64
 800044e:	d9e8      	bls.n	8000422 <HAL_RCC_OscConfig+0x11a>
 8000450:	e7c4      	b.n	80003dc <HAL_RCC_OscConfig+0xd4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000452:	f000 fe53 	bl	80010fc <HAL_GetTick>
 8000456:	4606      	mov	r6, r0
 8000458:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800045c:	fa93 f3a3 	rbit	r3, r3
 8000460:	f44f 3300 	mov.w	r3, #131072	; 0x20000
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000464:	682a      	ldr	r2, [r5, #0]
 8000466:	fa93 f3a3 	rbit	r3, r3
 800046a:	fab3 f383 	clz	r3, r3
 800046e:	f003 031f 	and.w	r3, r3, #31
 8000472:	fa22 f303 	lsr.w	r3, r2, r3
 8000476:	07d8      	lsls	r0, r3, #31
 8000478:	f57f af5a 	bpl.w	8000330 <HAL_RCC_OscConfig+0x28>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800047c:	f000 fe3e 	bl	80010fc <HAL_GetTick>
 8000480:	1b80      	subs	r0, r0, r6
 8000482:	2864      	cmp	r0, #100	; 0x64
 8000484:	d9e8      	bls.n	8000458 <HAL_RCC_OscConfig+0x150>
 8000486:	e7a9      	b.n	80003dc <HAL_RCC_OscConfig+0xd4>
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8000488:	6923      	ldr	r3, [r4, #16]
 800048a:	2b01      	cmp	r3, #1
 800048c:	d904      	bls.n	8000498 <HAL_RCC_OscConfig+0x190>
 800048e:	4846      	ldr	r0, [pc, #280]	; (80005a8 <HAL_RCC_OscConfig+0x2a0>)
 8000490:	f240 1159 	movw	r1, #345	; 0x159
 8000494:	f7ff ff36 	bl	8000304 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8000498:	6963      	ldr	r3, [r4, #20]
 800049a:	2b1f      	cmp	r3, #31
 800049c:	d904      	bls.n	80004a8 <HAL_RCC_OscConfig+0x1a0>
 800049e:	4842      	ldr	r0, [pc, #264]	; (80005a8 <HAL_RCC_OscConfig+0x2a0>)
 80004a0:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 80004a4:	f7ff ff2e 	bl	8000304 <assert_failed>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80004a8:	4d40      	ldr	r5, [pc, #256]	; (80005ac <HAL_RCC_OscConfig+0x2a4>)
 80004aa:	686b      	ldr	r3, [r5, #4]
 80004ac:	f013 0f0c 	tst.w	r3, #12
 80004b0:	d007      	beq.n	80004c2 <HAL_RCC_OscConfig+0x1ba>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80004b2:	686b      	ldr	r3, [r5, #4]
 80004b4:	f003 030c 	and.w	r3, r3, #12
 80004b8:	2b08      	cmp	r3, #8
 80004ba:	d116      	bne.n	80004ea <HAL_RCC_OscConfig+0x1e2>
 80004bc:	686b      	ldr	r3, [r5, #4]
 80004be:	03d9      	lsls	r1, r3, #15
 80004c0:	d413      	bmi.n	80004ea <HAL_RCC_OscConfig+0x1e2>
 80004c2:	2302      	movs	r3, #2
 80004c4:	fa93 f3a3 	rbit	r3, r3
 80004c8:	2302      	movs	r3, #2
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80004ca:	682a      	ldr	r2, [r5, #0]
 80004cc:	fa93 f3a3 	rbit	r3, r3
 80004d0:	fab3 f383 	clz	r3, r3
 80004d4:	f003 031f 	and.w	r3, r3, #31
 80004d8:	fa22 f303 	lsr.w	r3, r2, r3
 80004dc:	07da      	lsls	r2, r3, #31
 80004de:	d52a      	bpl.n	8000536 <HAL_RCC_OscConfig+0x22e>
 80004e0:	6923      	ldr	r3, [r4, #16]
 80004e2:	2b01      	cmp	r3, #1
 80004e4:	f47f af57 	bne.w	8000396 <HAL_RCC_OscConfig+0x8e>
 80004e8:	e025      	b.n	8000536 <HAL_RCC_OscConfig+0x22e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80004ea:	6922      	ldr	r2, [r4, #16]
 80004ec:	2301      	movs	r3, #1
 80004ee:	b382      	cbz	r2, 8000552 <HAL_RCC_OscConfig+0x24a>
 80004f0:	fa93 f3a3 	rbit	r3, r3
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80004f4:	fab3 f383 	clz	r3, r3
 80004f8:	009b      	lsls	r3, r3, #2
 80004fa:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80004fe:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000502:	2201      	movs	r2, #1
 8000504:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000506:	f000 fdf9 	bl	80010fc <HAL_GetTick>
 800050a:	4606      	mov	r6, r0
 800050c:	2302      	movs	r3, #2
 800050e:	fa93 f3a3 	rbit	r3, r3
 8000512:	2302      	movs	r3, #2
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000514:	682a      	ldr	r2, [r5, #0]
 8000516:	fa93 f3a3 	rbit	r3, r3
 800051a:	fab3 f383 	clz	r3, r3
 800051e:	f003 031f 	and.w	r3, r3, #31
 8000522:	fa22 f303 	lsr.w	r3, r2, r3
 8000526:	07db      	lsls	r3, r3, #31
 8000528:	d405      	bmi.n	8000536 <HAL_RCC_OscConfig+0x22e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800052a:	f000 fde7 	bl	80010fc <HAL_GetTick>
 800052e:	1b80      	subs	r0, r0, r6
 8000530:	2864      	cmp	r0, #100	; 0x64
 8000532:	d9eb      	bls.n	800050c <HAL_RCC_OscConfig+0x204>
 8000534:	e752      	b.n	80003dc <HAL_RCC_OscConfig+0xd4>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000536:	682a      	ldr	r2, [r5, #0]
 8000538:	21f8      	movs	r1, #248	; 0xf8
 800053a:	fa91 f1a1 	rbit	r1, r1
 800053e:	6963      	ldr	r3, [r4, #20]
 8000540:	fab1 f181 	clz	r1, r1
 8000544:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000548:	408b      	lsls	r3, r1
 800054a:	4313      	orrs	r3, r2
 800054c:	4a17      	ldr	r2, [pc, #92]	; (80005ac <HAL_RCC_OscConfig+0x2a4>)
 800054e:	6013      	str	r3, [r2, #0]
 8000550:	e022      	b.n	8000598 <HAL_RCC_OscConfig+0x290>
 8000552:	fa93 f3a3 	rbit	r3, r3
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000556:	fab3 f383 	clz	r3, r3
 800055a:	009b      	lsls	r3, r3, #2
 800055c:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000560:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000568:	f000 fdc8 	bl	80010fc <HAL_GetTick>
 800056c:	4606      	mov	r6, r0
 800056e:	2302      	movs	r3, #2
 8000570:	fa93 f3a3 	rbit	r3, r3
 8000574:	2302      	movs	r3, #2
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000576:	682a      	ldr	r2, [r5, #0]
 8000578:	fa93 f3a3 	rbit	r3, r3
 800057c:	fab3 f383 	clz	r3, r3
 8000580:	f003 031f 	and.w	r3, r3, #31
 8000584:	fa22 f303 	lsr.w	r3, r2, r3
 8000588:	07d8      	lsls	r0, r3, #31
 800058a:	d505      	bpl.n	8000598 <HAL_RCC_OscConfig+0x290>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800058c:	f000 fdb6 	bl	80010fc <HAL_GetTick>
 8000590:	1b80      	subs	r0, r0, r6
 8000592:	2864      	cmp	r0, #100	; 0x64
 8000594:	d9eb      	bls.n	800056e <HAL_RCC_OscConfig+0x266>
 8000596:	e721      	b.n	80003dc <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000598:	6823      	ldr	r3, [r4, #0]
 800059a:	0719      	lsls	r1, r3, #28
 800059c:	d408      	bmi.n	80005b0 <HAL_RCC_OscConfig+0x2a8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800059e:	6823      	ldr	r3, [r4, #0]
 80005a0:	075a      	lsls	r2, r3, #29
 80005a2:	d45c      	bmi.n	800065e <HAL_RCC_OscConfig+0x356>
 80005a4:	e0b9      	b.n	800071a <HAL_RCC_OscConfig+0x412>
 80005a6:	bf00      	nop
 80005a8:	08001250 	.word	0x08001250
 80005ac:	40021000 	.word	0x40021000
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80005b0:	69a3      	ldr	r3, [r4, #24]
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d904      	bls.n	80005c0 <HAL_RCC_OscConfig+0x2b8>
 80005b6:	48bb      	ldr	r0, [pc, #748]	; (80008a4 <HAL_RCC_OscConfig+0x59c>)
 80005b8:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 80005bc:	f7ff fea2 	bl	8000304 <assert_failed>
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80005c0:	69a1      	ldr	r1, [r4, #24]
 80005c2:	4db9      	ldr	r5, [pc, #740]	; (80008a8 <HAL_RCC_OscConfig+0x5a0>)
 80005c4:	4bb9      	ldr	r3, [pc, #740]	; (80008ac <HAL_RCC_OscConfig+0x5a4>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	b321      	cbz	r1, 8000614 <HAL_RCC_OscConfig+0x30c>
 80005ca:	fa92 f2a2 	rbit	r2, r2
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80005ce:	fab2 f282 	clz	r2, r2
 80005d2:	2101      	movs	r1, #1
 80005d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80005d8:	f000 fd90 	bl	80010fc <HAL_GetTick>
 80005dc:	4606      	mov	r6, r0
 80005de:	2302      	movs	r3, #2
 80005e0:	fa93 f3a3 	rbit	r3, r3
 80005e4:	2302      	movs	r3, #2
 80005e6:	fa93 f3a3 	rbit	r3, r3
 80005ea:	2302      	movs	r3, #2
 80005ec:	fa93 f3a3 	rbit	r3, r3
 80005f0:	2302      	movs	r3, #2
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80005f2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80005f4:	fa93 f3a3 	rbit	r3, r3
 80005f8:	fab3 f383 	clz	r3, r3
 80005fc:	f003 031f 	and.w	r3, r3, #31
 8000600:	fa22 f303 	lsr.w	r3, r2, r3
 8000604:	07db      	lsls	r3, r3, #31
 8000606:	d4ca      	bmi.n	800059e <HAL_RCC_OscConfig+0x296>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000608:	f000 fd78 	bl	80010fc <HAL_GetTick>
 800060c:	1b80      	subs	r0, r0, r6
 800060e:	2864      	cmp	r0, #100	; 0x64
 8000610:	d9e5      	bls.n	80005de <HAL_RCC_OscConfig+0x2d6>
 8000612:	e6e3      	b.n	80003dc <HAL_RCC_OscConfig+0xd4>
 8000614:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000618:	fab2 f282 	clz	r2, r2
 800061c:	2100      	movs	r1, #0
 800061e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000622:	f000 fd6b 	bl	80010fc <HAL_GetTick>
 8000626:	4606      	mov	r6, r0
 8000628:	2302      	movs	r3, #2
 800062a:	fa93 f3a3 	rbit	r3, r3
 800062e:	2302      	movs	r3, #2
 8000630:	fa93 f3a3 	rbit	r3, r3
 8000634:	2302      	movs	r3, #2
 8000636:	fa93 f3a3 	rbit	r3, r3
 800063a:	2302      	movs	r3, #2
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800063c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800063e:	fa93 f3a3 	rbit	r3, r3
 8000642:	fab3 f383 	clz	r3, r3
 8000646:	f003 031f 	and.w	r3, r3, #31
 800064a:	fa22 f303 	lsr.w	r3, r2, r3
 800064e:	07d8      	lsls	r0, r3, #31
 8000650:	d5a5      	bpl.n	800059e <HAL_RCC_OscConfig+0x296>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000652:	f000 fd53 	bl	80010fc <HAL_GetTick>
 8000656:	1b80      	subs	r0, r0, r6
 8000658:	2864      	cmp	r0, #100	; 0x64
 800065a:	d9e5      	bls.n	8000628 <HAL_RCC_OscConfig+0x320>
 800065c:	e6be      	b.n	80003dc <HAL_RCC_OscConfig+0xd4>
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800065e:	68e3      	ldr	r3, [r4, #12]
 8000660:	2b01      	cmp	r3, #1
 8000662:	d863      	bhi.n	800072c <HAL_RCC_OscConfig+0x424>
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000664:	4d90      	ldr	r5, [pc, #576]	; (80008a8 <HAL_RCC_OscConfig+0x5a0>)
 8000666:	69eb      	ldr	r3, [r5, #28]
 8000668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066c:	61eb      	str	r3, [r5, #28]
 800066e:	69eb      	ldr	r3, [r5, #28]
 8000670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8000678:	4b8d      	ldr	r3, [pc, #564]	; (80008b0 <HAL_RCC_OscConfig+0x5a8>)
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000680:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8000682:	f000 fd3b 	bl	80010fc <HAL_GetTick>
 8000686:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000688:	4b89      	ldr	r3, [pc, #548]	; (80008b0 <HAL_RCC_OscConfig+0x5a8>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	05d9      	lsls	r1, r3, #23
 800068e:	d555      	bpl.n	800073c <HAL_RCC_OscConfig+0x434>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8000690:	6a2b      	ldr	r3, [r5, #32]
 8000692:	f023 0301 	bic.w	r3, r3, #1
 8000696:	622b      	str	r3, [r5, #32]
 8000698:	6a2b      	ldr	r3, [r5, #32]
 800069a:	f023 0304 	bic.w	r3, r3, #4
 800069e:	622b      	str	r3, [r5, #32]
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80006a0:	f000 fd2c 	bl	80010fc <HAL_GetTick>
 80006a4:	4606      	mov	r6, r0
 80006a6:	2302      	movs	r3, #2
 80006a8:	fa93 f3a3 	rbit	r3, r3
 80006ac:	2302      	movs	r3, #2
 80006ae:	fa93 f3a3 	rbit	r3, r3
    
    /* Wait till LSE is disabled */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80006b2:	fab3 f383 	clz	r3, r3
 80006b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006ba:	095b      	lsrs	r3, r3, #5
 80006bc:	2b02      	cmp	r3, #2
 80006be:	d143      	bne.n	8000748 <HAL_RCC_OscConfig+0x440>
 80006c0:	6a2b      	ldr	r3, [r5, #32]
 80006c2:	2202      	movs	r2, #2
 80006c4:	fa92 f2a2 	rbit	r2, r2
 80006c8:	fab2 f282 	clz	r2, r2
 80006cc:	f002 021f 	and.w	r2, r2, #31
 80006d0:	40d3      	lsrs	r3, r2
 80006d2:	07da      	lsls	r2, r3, #31
 80006d4:	d43d      	bmi.n	8000752 <HAL_RCC_OscConfig+0x44a>
        return HAL_TIMEOUT;
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006d6:	68e3      	ldr	r3, [r4, #12]
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d142      	bne.n	8000762 <HAL_RCC_OscConfig+0x45a>
 80006dc:	6a2b      	ldr	r3, [r5, #32]
 80006de:	f043 0301 	orr.w	r3, r3, #1
 80006e2:	622b      	str	r3, [r5, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80006e4:	f000 fd0a 	bl	80010fc <HAL_GetTick>
 80006e8:	4606      	mov	r6, r0
 80006ea:	2302      	movs	r3, #2
 80006ec:	fa93 f3a3 	rbit	r3, r3
 80006f0:	2302      	movs	r3, #2
 80006f2:	fa93 f3a3 	rbit	r3, r3
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80006f6:	fab3 f383 	clz	r3, r3
 80006fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006fe:	095b      	lsrs	r3, r3, #5
 8000700:	2b02      	cmp	r3, #2
 8000702:	d149      	bne.n	8000798 <HAL_RCC_OscConfig+0x490>
 8000704:	6a2b      	ldr	r3, [r5, #32]
 8000706:	2202      	movs	r2, #2
 8000708:	fa92 f2a2 	rbit	r2, r2
 800070c:	fab2 f282 	clz	r2, r2
 8000710:	f002 021f 	and.w	r2, r2, #31
 8000714:	40d3      	lsrs	r3, r2
 8000716:	07db      	lsls	r3, r3, #31
 8000718:	d543      	bpl.n	80007a2 <HAL_RCC_OscConfig+0x49a>
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800071a:	69e3      	ldr	r3, [r4, #28]
 800071c:	2b02      	cmp	r3, #2
 800071e:	d96d      	bls.n	80007fc <HAL_RCC_OscConfig+0x4f4>
 8000720:	4860      	ldr	r0, [pc, #384]	; (80008a4 <HAL_RCC_OscConfig+0x59c>)
 8000722:	f240 2109 	movw	r1, #521	; 0x209
 8000726:	f7ff fded 	bl	8000304 <assert_failed>
 800072a:	e067      	b.n	80007fc <HAL_RCC_OscConfig+0x4f4>
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800072c:	2b05      	cmp	r3, #5
 800072e:	d099      	beq.n	8000664 <HAL_RCC_OscConfig+0x35c>
 8000730:	485c      	ldr	r0, [pc, #368]	; (80008a4 <HAL_RCC_OscConfig+0x59c>)
 8000732:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8000736:	f7ff fde5 	bl	8000304 <assert_failed>
 800073a:	e793      	b.n	8000664 <HAL_RCC_OscConfig+0x35c>
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800073c:	f000 fcde 	bl	80010fc <HAL_GetTick>
 8000740:	1b80      	subs	r0, r0, r6
 8000742:	2864      	cmp	r0, #100	; 0x64
 8000744:	d9a0      	bls.n	8000688 <HAL_RCC_OscConfig+0x380>
 8000746:	e649      	b.n	80003dc <HAL_RCC_OscConfig+0xd4>
 8000748:	2302      	movs	r3, #2
 800074a:	fa93 f3a3 	rbit	r3, r3
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    /* Wait till LSE is disabled */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800074e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000750:	e7b7      	b.n	80006c2 <HAL_RCC_OscConfig+0x3ba>
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000752:	f000 fcd3 	bl	80010fc <HAL_GetTick>
 8000756:	f241 3388 	movw	r3, #5000	; 0x1388
 800075a:	1b80      	subs	r0, r0, r6
 800075c:	4298      	cmp	r0, r3
 800075e:	d9a2      	bls.n	80006a6 <HAL_RCC_OscConfig+0x39e>
 8000760:	e63c      	b.n	80003dc <HAL_RCC_OscConfig+0xd4>
        return HAL_TIMEOUT;
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000762:	b95b      	cbnz	r3, 800077c <HAL_RCC_OscConfig+0x474>
 8000764:	6a2b      	ldr	r3, [r5, #32]
 8000766:	f023 0301 	bic.w	r3, r3, #1
 800076a:	622b      	str	r3, [r5, #32]
 800076c:	6a2b      	ldr	r3, [r5, #32]
 800076e:	f023 0304 	bic.w	r3, r3, #4
 8000772:	622b      	str	r3, [r5, #32]
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000774:	f000 fcc2 	bl	80010fc <HAL_GetTick>
 8000778:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800077a:	e030      	b.n	80007de <HAL_RCC_OscConfig+0x4d6>
        return HAL_TIMEOUT;
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800077c:	2b05      	cmp	r3, #5
 800077e:	6a2b      	ldr	r3, [r5, #32]
 8000780:	d103      	bne.n	800078a <HAL_RCC_OscConfig+0x482>
 8000782:	f043 0304 	orr.w	r3, r3, #4
 8000786:	622b      	str	r3, [r5, #32]
 8000788:	e7a8      	b.n	80006dc <HAL_RCC_OscConfig+0x3d4>
 800078a:	f023 0301 	bic.w	r3, r3, #1
 800078e:	622b      	str	r3, [r5, #32]
 8000790:	6a2b      	ldr	r3, [r5, #32]
 8000792:	f023 0304 	bic.w	r3, r3, #4
 8000796:	e7a4      	b.n	80006e2 <HAL_RCC_OscConfig+0x3da>
 8000798:	2302      	movs	r3, #2
 800079a:	fa93 f3a3 	rbit	r3, r3
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800079e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80007a0:	e7b1      	b.n	8000706 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007a2:	f000 fcab 	bl	80010fc <HAL_GetTick>
 80007a6:	f241 3388 	movw	r3, #5000	; 0x1388
 80007aa:	1b80      	subs	r0, r0, r6
 80007ac:	4298      	cmp	r0, r3
 80007ae:	d99c      	bls.n	80006ea <HAL_RCC_OscConfig+0x3e2>
 80007b0:	e614      	b.n	80003dc <HAL_RCC_OscConfig+0xd4>
 80007b2:	2302      	movs	r3, #2
 80007b4:	fa93 f3a3 	rbit	r3, r3
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80007b8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80007ba:	2202      	movs	r2, #2
 80007bc:	fa92 f2a2 	rbit	r2, r2
 80007c0:	fab2 f282 	clz	r2, r2
 80007c4:	f002 021f 	and.w	r2, r2, #31
 80007c8:	40d3      	lsrs	r3, r2
 80007ca:	07d8      	lsls	r0, r3, #31
 80007cc:	d5a5      	bpl.n	800071a <HAL_RCC_OscConfig+0x412>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007ce:	f000 fc95 	bl	80010fc <HAL_GetTick>
 80007d2:	f241 3388 	movw	r3, #5000	; 0x1388
 80007d6:	1b80      	subs	r0, r0, r6
 80007d8:	4298      	cmp	r0, r3
 80007da:	f63f adff 	bhi.w	80003dc <HAL_RCC_OscConfig+0xd4>
 80007de:	2302      	movs	r3, #2
 80007e0:	fa93 f3a3 	rbit	r3, r3
 80007e4:	2302      	movs	r3, #2
 80007e6:	fa93 f3a3 	rbit	r3, r3
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80007ea:	fab3 f383 	clz	r3, r3
 80007ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f2:	095b      	lsrs	r3, r3, #5
 80007f4:	2b02      	cmp	r3, #2
 80007f6:	d1dc      	bne.n	80007b2 <HAL_RCC_OscConfig+0x4aa>
 80007f8:	6a2b      	ldr	r3, [r5, #32]
 80007fa:	e7de      	b.n	80007ba <HAL_RCC_OscConfig+0x4b2>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80007fc:	69e3      	ldr	r3, [r4, #28]
 80007fe:	b90b      	cbnz	r3, 8000804 <HAL_RCC_OscConfig+0x4fc>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000800:	2000      	movs	r0, #0
 8000802:	e0af      	b.n	8000964 <HAL_RCC_OscConfig+0x65c>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000804:	4d28      	ldr	r5, [pc, #160]	; (80008a8 <HAL_RCC_OscConfig+0x5a0>)
 8000806:	686a      	ldr	r2, [r5, #4]
 8000808:	f002 020c 	and.w	r2, r2, #12
 800080c:	2a08      	cmp	r2, #8
 800080e:	f43f adc2 	beq.w	8000396 <HAL_RCC_OscConfig+0x8e>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000812:	2b02      	cmp	r3, #2
 8000814:	d17e      	bne.n	8000914 <HAL_RCC_OscConfig+0x60c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8000816:	6a23      	ldr	r3, [r4, #32]
 8000818:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 800081c:	d004      	beq.n	8000828 <HAL_RCC_OscConfig+0x520>
 800081e:	4821      	ldr	r0, [pc, #132]	; (80008a4 <HAL_RCC_OscConfig+0x59c>)
 8000820:	f240 2112 	movw	r1, #530	; 0x212
 8000824:	f7ff fd6e 	bl	8000304 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8000828:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800082a:	f433 2240 	bics.w	r2, r3, #786432	; 0xc0000
 800082e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8000832:	d010      	beq.n	8000856 <HAL_RCC_OscConfig+0x54e>
 8000834:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8000838:	d00d      	beq.n	8000856 <HAL_RCC_OscConfig+0x54e>
 800083a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800083e:	d00a      	beq.n	8000856 <HAL_RCC_OscConfig+0x54e>
 8000840:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8000844:	d007      	beq.n	8000856 <HAL_RCC_OscConfig+0x54e>
 8000846:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 800084a:	d004      	beq.n	8000856 <HAL_RCC_OscConfig+0x54e>
 800084c:	4815      	ldr	r0, [pc, #84]	; (80008a4 <HAL_RCC_OscConfig+0x59c>)
 800084e:	f240 2113 	movw	r1, #531	; 0x213
 8000852:	f7ff fd57 	bl	8000304 <assert_failed>
 8000856:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800085a:	fa93 f3a3 	rbit	r3, r3
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800085e:	fab3 f383 	clz	r3, r3
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000868:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000870:	f000 fc44 	bl	80010fc <HAL_GetTick>
 8000874:	4606      	mov	r6, r0
 8000876:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800087a:	fa93 f3a3 	rbit	r3, r3
 800087e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000882:	682a      	ldr	r2, [r5, #0]
 8000884:	fa93 f3a3 	rbit	r3, r3
 8000888:	fab3 f383 	clz	r3, r3
 800088c:	f003 031f 	and.w	r3, r3, #31
 8000890:	fa22 f303 	lsr.w	r3, r2, r3
 8000894:	07d9      	lsls	r1, r3, #31
 8000896:	d50d      	bpl.n	80008b4 <HAL_RCC_OscConfig+0x5ac>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000898:	f000 fc30 	bl	80010fc <HAL_GetTick>
 800089c:	1b80      	subs	r0, r0, r6
 800089e:	2864      	cmp	r0, #100	; 0x64
 80008a0:	d9e9      	bls.n	8000876 <HAL_RCC_OscConfig+0x56e>
 80008a2:	e59b      	b.n	80003dc <HAL_RCC_OscConfig+0xd4>
 80008a4:	08001250 	.word	0x08001250
 80008a8:	40021000 	.word	0x40021000
 80008ac:	42420480 	.word	0x42420480
 80008b0:	40007000 	.word	0x40007000
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80008b4:	686a      	ldr	r2, [r5, #4]
 80008b6:	6a21      	ldr	r1, [r4, #32]
 80008b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80008ba:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80008be:	430b      	orrs	r3, r1
 80008c0:	4313      	orrs	r3, r2
 80008c2:	606b      	str	r3, [r5, #4]
 80008c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008c8:	fa93 f3a3 	rbit	r3, r3
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80008cc:	fab3 f383 	clz	r3, r3
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80008d6:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80008da:	2201      	movs	r2, #1
 80008dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008de:	f000 fc0d 	bl	80010fc <HAL_GetTick>
 80008e2:	4604      	mov	r4, r0
 80008e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80008e8:	fa93 f3a3 	rbit	r3, r3
 80008ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80008f0:	682a      	ldr	r2, [r5, #0]
 80008f2:	fa93 f3a3 	rbit	r3, r3
 80008f6:	fab3 f383 	clz	r3, r3
 80008fa:	f003 031f 	and.w	r3, r3, #31
 80008fe:	fa22 f303 	lsr.w	r3, r2, r3
 8000902:	07da      	lsls	r2, r3, #31
 8000904:	f53f af7c 	bmi.w	8000800 <HAL_RCC_OscConfig+0x4f8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000908:	f000 fbf8 	bl	80010fc <HAL_GetTick>
 800090c:	1b00      	subs	r0, r0, r4
 800090e:	2864      	cmp	r0, #100	; 0x64
 8000910:	d9e8      	bls.n	80008e4 <HAL_RCC_OscConfig+0x5dc>
 8000912:	e563      	b.n	80003dc <HAL_RCC_OscConfig+0xd4>
 8000914:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000918:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800091c:	fab3 f383 	clz	r3, r3
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000926:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800092e:	f000 fbe5 	bl	80010fc <HAL_GetTick>
 8000932:	4604      	mov	r4, r0
 8000934:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000938:	fa93 f3a3 	rbit	r3, r3
 800093c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000940:	682a      	ldr	r2, [r5, #0]
 8000942:	fa93 f3a3 	rbit	r3, r3
 8000946:	fab3 f383 	clz	r3, r3
 800094a:	f003 031f 	and.w	r3, r3, #31
 800094e:	fa22 f303 	lsr.w	r3, r2, r3
 8000952:	07db      	lsls	r3, r3, #31
 8000954:	f57f af54 	bpl.w	8000800 <HAL_RCC_OscConfig+0x4f8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000958:	f000 fbd0 	bl	80010fc <HAL_GetTick>
 800095c:	1b00      	subs	r0, r0, r4
 800095e:	2864      	cmp	r0, #100	; 0x64
 8000960:	d9e8      	bls.n	8000934 <HAL_RCC_OscConfig+0x62c>
 8000962:	e53b      	b.n	80003dc <HAL_RCC_OscConfig+0xd4>
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8000964:	b002      	add	sp, #8
 8000966:	bd70      	pop	{r4, r5, r6, pc}

08000968 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800096a:	460e      	mov	r6, r1
  uint32_t tickstart = 0;
  
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
 800096c:	4604      	mov	r4, r0
 800096e:	b920      	cbnz	r0, 800097a <HAL_RCC_ClockConfig+0x12>
 8000970:	48a2      	ldr	r0, [pc, #648]	; (8000bfc <HAL_RCC_ClockConfig+0x294>)
 8000972:	f240 2177 	movw	r1, #631	; 0x277
 8000976:	f7ff fcc5 	bl	8000304 <assert_failed>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800097a:	6823      	ldr	r3, [r4, #0]
 800097c:	0719      	lsls	r1, r3, #28
 800097e:	d104      	bne.n	800098a <HAL_RCC_ClockConfig+0x22>
 8000980:	489e      	ldr	r0, [pc, #632]	; (8000bfc <HAL_RCC_ClockConfig+0x294>)
 8000982:	f44f 711e 	mov.w	r1, #632	; 0x278
 8000986:	f7ff fcbd 	bl	8000304 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800098a:	2e02      	cmp	r6, #2
 800098c:	d904      	bls.n	8000998 <HAL_RCC_ClockConfig+0x30>
 800098e:	489b      	ldr	r0, [pc, #620]	; (8000bfc <HAL_RCC_ClockConfig+0x294>)
 8000990:	f240 2179 	movw	r1, #633	; 0x279
 8000994:	f7ff fcb6 	bl	8000304 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000998:	4b99      	ldr	r3, [pc, #612]	; (8000c00 <HAL_RCC_ClockConfig+0x298>)
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	f002 0207 	and.w	r2, r2, #7
 80009a0:	4296      	cmp	r6, r2
 80009a2:	f240 8097 	bls.w	8000ad4 <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	f022 0207 	bic.w	r2, r2, #7
 80009ac:	4332      	orrs	r2, r6
 80009ae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f003 0307 	and.w	r3, r3, #7
 80009b6:	42b3      	cmp	r3, r6
 80009b8:	d001      	beq.n	80009be <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80009ba:	2001      	movs	r0, #1
 80009bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80009be:	6823      	ldr	r3, [r4, #0]
 80009c0:	079a      	lsls	r2, r3, #30
 80009c2:	d51d      	bpl.n	8000a00 <HAL_RCC_ClockConfig+0x98>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80009c4:	68a3      	ldr	r3, [r4, #8]
 80009c6:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 80009ca:	d012      	beq.n	80009f2 <HAL_RCC_ClockConfig+0x8a>
 80009cc:	f023 0220 	bic.w	r2, r3, #32
 80009d0:	2a90      	cmp	r2, #144	; 0x90
 80009d2:	d00e      	beq.n	80009f2 <HAL_RCC_ClockConfig+0x8a>
 80009d4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80009d8:	2aa0      	cmp	r2, #160	; 0xa0
 80009da:	d00a      	beq.n	80009f2 <HAL_RCC_ClockConfig+0x8a>
 80009dc:	f023 0210 	bic.w	r2, r3, #16
 80009e0:	2ac0      	cmp	r2, #192	; 0xc0
 80009e2:	d006      	beq.n	80009f2 <HAL_RCC_ClockConfig+0x8a>
 80009e4:	2bf0      	cmp	r3, #240	; 0xf0
 80009e6:	d004      	beq.n	80009f2 <HAL_RCC_ClockConfig+0x8a>
 80009e8:	4884      	ldr	r0, [pc, #528]	; (8000bfc <HAL_RCC_ClockConfig+0x294>)
 80009ea:	f240 218f 	movw	r1, #655	; 0x28f
 80009ee:	f7ff fc89 	bl	8000304 <assert_failed>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80009f2:	4b84      	ldr	r3, [pc, #528]	; (8000c04 <HAL_RCC_ClockConfig+0x29c>)
 80009f4:	68a2      	ldr	r2, [r4, #8]
 80009f6:	6859      	ldr	r1, [r3, #4]
 80009f8:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 80009fc:	430a      	orrs	r2, r1
 80009fe:	605a      	str	r2, [r3, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a00:	6823      	ldr	r3, [r4, #0]
 8000a02:	07db      	lsls	r3, r3, #31
 8000a04:	d404      	bmi.n	8000a10 <HAL_RCC_ClockConfig+0xa8>
      return HAL_ERROR;
    }
  }
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a06:	6823      	ldr	r3, [r4, #0]
 8000a08:	075f      	lsls	r7, r3, #29
 8000a0a:	f100 80fd 	bmi.w	8000c08 <HAL_RCC_ClockConfig+0x2a0>
 8000a0e:	e113      	b.n	8000c38 <HAL_RCC_ClockConfig+0x2d0>
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8000a10:	6863      	ldr	r3, [r4, #4]
 8000a12:	2b02      	cmp	r3, #2
 8000a14:	d904      	bls.n	8000a20 <HAL_RCC_ClockConfig+0xb8>
 8000a16:	4879      	ldr	r0, [pc, #484]	; (8000bfc <HAL_RCC_ClockConfig+0x294>)
 8000a18:	f240 2196 	movw	r1, #662	; 0x296
 8000a1c:	f7ff fc72 	bl	8000304 <assert_failed>
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a20:	6863      	ldr	r3, [r4, #4]
 8000a22:	4d78      	ldr	r5, [pc, #480]	; (8000c04 <HAL_RCC_ClockConfig+0x29c>)
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d107      	bne.n	8000a38 <HAL_RCC_ClockConfig+0xd0>
 8000a28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a2c:	fa92 f2a2 	rbit	r2, r2
 8000a30:	f44f 3200 	mov.w	r2, #131072	; 0x20000
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a34:	6829      	ldr	r1, [r5, #0]
 8000a36:	e00e      	b.n	8000a56 <HAL_RCC_ClockConfig+0xee>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a38:	2b02      	cmp	r3, #2
 8000a3a:	d107      	bne.n	8000a4c <HAL_RCC_ClockConfig+0xe4>
 8000a3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000a40:	fa92 f2a2 	rbit	r2, r2
 8000a44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a48:	6829      	ldr	r1, [r5, #0]
 8000a4a:	e004      	b.n	8000a56 <HAL_RCC_ClockConfig+0xee>
 8000a4c:	2202      	movs	r2, #2
 8000a4e:	fa92 f2a2 	rbit	r2, r2
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a52:	6829      	ldr	r1, [r5, #0]
 8000a54:	2202      	movs	r2, #2
 8000a56:	fa92 f2a2 	rbit	r2, r2
 8000a5a:	fab2 f282 	clz	r2, r2
 8000a5e:	f002 021f 	and.w	r2, r2, #31
 8000a62:	fa21 f202 	lsr.w	r2, r1, r2
 8000a66:	07d6      	lsls	r6, r2, #31
 8000a68:	d5a7      	bpl.n	80009ba <HAL_RCC_ClockConfig+0x52>
        {
          return HAL_ERROR;
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a6a:	686a      	ldr	r2, [r5, #4]
 8000a6c:	f022 0203 	bic.w	r2, r2, #3
 8000a70:	4313      	orrs	r3, r2
 8000a72:	606b      	str	r3, [r5, #4]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a74:	f000 fb42 	bl	80010fc <HAL_GetTick>
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a78:	6863      	ldr	r3, [r4, #4]
 8000a7a:	2b01      	cmp	r3, #1
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a7c:	4606      	mov	r6, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a7e:	d10d      	bne.n	8000a9c <HAL_RCC_ClockConfig+0x134>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a80:	686b      	ldr	r3, [r5, #4]
 8000a82:	f003 030c 	and.w	r3, r3, #12
 8000a86:	2b04      	cmp	r3, #4
 8000a88:	d0bd      	beq.n	8000a06 <HAL_RCC_ClockConfig+0x9e>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a8a:	f000 fb37 	bl	80010fc <HAL_GetTick>
 8000a8e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a92:	1b80      	subs	r0, r0, r6
 8000a94:	4298      	cmp	r0, r3
 8000a96:	d9f3      	bls.n	8000a80 <HAL_RCC_ClockConfig+0x118>
          {
            return HAL_TIMEOUT;
 8000a98:	2003      	movs	r0, #3
 8000a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a9c:	2b02      	cmp	r3, #2
 8000a9e:	d00b      	beq.n	8000ab8 <HAL_RCC_ClockConfig+0x150>
          }
        }
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000aa0:	686b      	ldr	r3, [r5, #4]
 8000aa2:	f013 0f0c 	tst.w	r3, #12
 8000aa6:	d10d      	bne.n	8000ac4 <HAL_RCC_ClockConfig+0x15c>
 8000aa8:	e7ad      	b.n	8000a06 <HAL_RCC_ClockConfig+0x9e>
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000aaa:	f000 fb27 	bl	80010fc <HAL_GetTick>
 8000aae:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ab2:	1b80      	subs	r0, r0, r6
 8000ab4:	4298      	cmp	r0, r3
 8000ab6:	d8ef      	bhi.n	8000a98 <HAL_RCC_ClockConfig+0x130>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ab8:	686b      	ldr	r3, [r5, #4]
 8000aba:	f003 030c 	and.w	r3, r3, #12
 8000abe:	2b08      	cmp	r3, #8
 8000ac0:	d1f3      	bne.n	8000aaa <HAL_RCC_ClockConfig+0x142>
 8000ac2:	e7a0      	b.n	8000a06 <HAL_RCC_ClockConfig+0x9e>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ac4:	f000 fb1a 	bl	80010fc <HAL_GetTick>
 8000ac8:	f241 3388 	movw	r3, #5000	; 0x1388
 8000acc:	1b80      	subs	r0, r0, r6
 8000ace:	4298      	cmp	r0, r3
 8000ad0:	d9e6      	bls.n	8000aa0 <HAL_RCC_ClockConfig+0x138>
 8000ad2:	e7e1      	b.n	8000a98 <HAL_RCC_ClockConfig+0x130>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ad4:	6823      	ldr	r3, [r4, #0]
 8000ad6:	0798      	lsls	r0, r3, #30
 8000ad8:	d51d      	bpl.n	8000b16 <HAL_RCC_ClockConfig+0x1ae>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8000ada:	68a3      	ldr	r3, [r4, #8]
 8000adc:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 8000ae0:	d012      	beq.n	8000b08 <HAL_RCC_ClockConfig+0x1a0>
 8000ae2:	f023 0220 	bic.w	r2, r3, #32
 8000ae6:	2a90      	cmp	r2, #144	; 0x90
 8000ae8:	d00e      	beq.n	8000b08 <HAL_RCC_ClockConfig+0x1a0>
 8000aea:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000aee:	2aa0      	cmp	r2, #160	; 0xa0
 8000af0:	d00a      	beq.n	8000b08 <HAL_RCC_ClockConfig+0x1a0>
 8000af2:	f023 0210 	bic.w	r2, r3, #16
 8000af6:	2ac0      	cmp	r2, #192	; 0xc0
 8000af8:	d006      	beq.n	8000b08 <HAL_RCC_ClockConfig+0x1a0>
 8000afa:	2bf0      	cmp	r3, #240	; 0xf0
 8000afc:	d004      	beq.n	8000b08 <HAL_RCC_ClockConfig+0x1a0>
 8000afe:	483f      	ldr	r0, [pc, #252]	; (8000bfc <HAL_RCC_ClockConfig+0x294>)
 8000b00:	f240 21de 	movw	r1, #734	; 0x2de
 8000b04:	f7ff fbfe 	bl	8000304 <assert_failed>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000b08:	4b3e      	ldr	r3, [pc, #248]	; (8000c04 <HAL_RCC_ClockConfig+0x29c>)
 8000b0a:	68a2      	ldr	r2, [r4, #8]
 8000b0c:	6859      	ldr	r1, [r3, #4]
 8000b0e:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8000b12:	430a      	orrs	r2, r1
 8000b14:	605a      	str	r2, [r3, #4]
    }
    
    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b16:	6823      	ldr	r3, [r4, #0]
 8000b18:	07d9      	lsls	r1, r3, #31
 8000b1a:	d40c      	bmi.n	8000b36 <HAL_RCC_ClockConfig+0x1ce>
        }
      }      
    } 
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b1c:	4b38      	ldr	r3, [pc, #224]	; (8000c00 <HAL_RCC_ClockConfig+0x298>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	f022 0207 	bic.w	r2, r2, #7
 8000b24:	4332      	orrs	r2, r6
 8000b26:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f003 0307 	and.w	r3, r3, #7
 8000b2e:	42b3      	cmp	r3, r6
 8000b30:	f47f af43 	bne.w	80009ba <HAL_RCC_ClockConfig+0x52>
 8000b34:	e767      	b.n	8000a06 <HAL_RCC_ClockConfig+0x9e>
    }
    
    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8000b36:	6863      	ldr	r3, [r4, #4]
 8000b38:	2b02      	cmp	r3, #2
 8000b3a:	d904      	bls.n	8000b46 <HAL_RCC_ClockConfig+0x1de>
 8000b3c:	482f      	ldr	r0, [pc, #188]	; (8000bfc <HAL_RCC_ClockConfig+0x294>)
 8000b3e:	f240 21e5 	movw	r1, #741	; 0x2e5
 8000b42:	f7ff fbdf 	bl	8000304 <assert_failed>
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b46:	6863      	ldr	r3, [r4, #4]
 8000b48:	4d2e      	ldr	r5, [pc, #184]	; (8000c04 <HAL_RCC_ClockConfig+0x29c>)
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d107      	bne.n	8000b5e <HAL_RCC_ClockConfig+0x1f6>
 8000b4e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b52:	fa92 f2a2 	rbit	r2, r2
 8000b56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b5a:	6829      	ldr	r1, [r5, #0]
 8000b5c:	e00e      	b.n	8000b7c <HAL_RCC_ClockConfig+0x214>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b5e:	2b02      	cmp	r3, #2
 8000b60:	d107      	bne.n	8000b72 <HAL_RCC_ClockConfig+0x20a>
 8000b62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000b66:	fa92 f2a2 	rbit	r2, r2
 8000b6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b6e:	6829      	ldr	r1, [r5, #0]
 8000b70:	e004      	b.n	8000b7c <HAL_RCC_ClockConfig+0x214>
 8000b72:	2202      	movs	r2, #2
 8000b74:	fa92 f2a2 	rbit	r2, r2
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b78:	6829      	ldr	r1, [r5, #0]
 8000b7a:	2202      	movs	r2, #2
 8000b7c:	fa92 f2a2 	rbit	r2, r2
 8000b80:	fab2 f282 	clz	r2, r2
 8000b84:	f002 021f 	and.w	r2, r2, #31
 8000b88:	fa21 f202 	lsr.w	r2, r1, r2
 8000b8c:	07d2      	lsls	r2, r2, #31
 8000b8e:	f57f af14 	bpl.w	80009ba <HAL_RCC_ClockConfig+0x52>
        {
          return HAL_ERROR;
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b92:	686a      	ldr	r2, [r5, #4]
 8000b94:	f022 0203 	bic.w	r2, r2, #3
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	606b      	str	r3, [r5, #4]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b9c:	f000 faae 	bl	80010fc <HAL_GetTick>
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ba0:	6863      	ldr	r3, [r4, #4]
 8000ba2:	2b01      	cmp	r3, #1
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ba4:	4607      	mov	r7, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ba6:	d10c      	bne.n	8000bc2 <HAL_RCC_ClockConfig+0x25a>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ba8:	686b      	ldr	r3, [r5, #4]
 8000baa:	f003 030c 	and.w	r3, r3, #12
 8000bae:	2b04      	cmp	r3, #4
 8000bb0:	d0b4      	beq.n	8000b1c <HAL_RCC_ClockConfig+0x1b4>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bb2:	f000 faa3 	bl	80010fc <HAL_GetTick>
 8000bb6:	f241 3388 	movw	r3, #5000	; 0x1388
 8000bba:	1bc0      	subs	r0, r0, r7
 8000bbc:	4298      	cmp	r0, r3
 8000bbe:	d9f3      	bls.n	8000ba8 <HAL_RCC_ClockConfig+0x240>
 8000bc0:	e76a      	b.n	8000a98 <HAL_RCC_ClockConfig+0x130>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000bc2:	2b02      	cmp	r3, #2
 8000bc4:	d00c      	beq.n	8000be0 <HAL_RCC_ClockConfig+0x278>
          }
        }
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000bc6:	686b      	ldr	r3, [r5, #4]
 8000bc8:	f013 0f0c 	tst.w	r3, #12
 8000bcc:	d10e      	bne.n	8000bec <HAL_RCC_ClockConfig+0x284>
 8000bce:	e7a5      	b.n	8000b1c <HAL_RCC_ClockConfig+0x1b4>
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bd0:	f000 fa94 	bl	80010fc <HAL_GetTick>
 8000bd4:	f241 3388 	movw	r3, #5000	; 0x1388
 8000bd8:	1bc0      	subs	r0, r0, r7
 8000bda:	4298      	cmp	r0, r3
 8000bdc:	f63f af5c 	bhi.w	8000a98 <HAL_RCC_ClockConfig+0x130>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000be0:	686b      	ldr	r3, [r5, #4]
 8000be2:	f003 030c 	and.w	r3, r3, #12
 8000be6:	2b08      	cmp	r3, #8
 8000be8:	d1f2      	bne.n	8000bd0 <HAL_RCC_ClockConfig+0x268>
 8000bea:	e797      	b.n	8000b1c <HAL_RCC_ClockConfig+0x1b4>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bec:	f000 fa86 	bl	80010fc <HAL_GetTick>
 8000bf0:	f241 3388 	movw	r3, #5000	; 0x1388
 8000bf4:	1bc0      	subs	r0, r0, r7
 8000bf6:	4298      	cmp	r0, r3
 8000bf8:	d9e5      	bls.n	8000bc6 <HAL_RCC_ClockConfig+0x25e>
 8000bfa:	e74d      	b.n	8000a98 <HAL_RCC_ClockConfig+0x130>
 8000bfc:	08001250 	.word	0x08001250
 8000c00:	40022000 	.word	0x40022000
 8000c04:	40021000 	.word	0x40021000
  }
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8000c08:	68e3      	ldr	r3, [r4, #12]
 8000c0a:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8000c0e:	d00c      	beq.n	8000c2a <HAL_RCC_ClockConfig+0x2c2>
 8000c10:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000c14:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8000c18:	d007      	beq.n	8000c2a <HAL_RCC_ClockConfig+0x2c2>
 8000c1a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000c1e:	d004      	beq.n	8000c2a <HAL_RCC_ClockConfig+0x2c2>
 8000c20:	4816      	ldr	r0, [pc, #88]	; (8000c7c <HAL_RCC_ClockConfig+0x314>)
 8000c22:	f240 3135 	movw	r1, #821	; 0x335
 8000c26:	f7ff fb6d 	bl	8000304 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <HAL_RCC_ClockConfig+0x318>)
 8000c2c:	68e2      	ldr	r2, [r4, #12]
 8000c2e:	6859      	ldr	r1, [r3, #4]
 8000c30:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8000c34:	430a      	orrs	r2, r1
 8000c36:	605a      	str	r2, [r3, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c38:	6823      	ldr	r3, [r4, #0]
 8000c3a:	071b      	lsls	r3, r3, #28
 8000c3c:	d518      	bpl.n	8000c70 <HAL_RCC_ClockConfig+0x308>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8000c3e:	6923      	ldr	r3, [r4, #16]
 8000c40:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8000c44:	d00c      	beq.n	8000c60 <HAL_RCC_ClockConfig+0x2f8>
 8000c46:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000c4a:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8000c4e:	d007      	beq.n	8000c60 <HAL_RCC_ClockConfig+0x2f8>
 8000c50:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000c54:	d004      	beq.n	8000c60 <HAL_RCC_ClockConfig+0x2f8>
 8000c56:	4809      	ldr	r0, [pc, #36]	; (8000c7c <HAL_RCC_ClockConfig+0x314>)
 8000c58:	f44f 714f 	mov.w	r1, #828	; 0x33c
 8000c5c:	f7ff fb52 	bl	8000304 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000c60:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <HAL_RCC_ClockConfig+0x318>)
 8000c62:	6921      	ldr	r1, [r4, #16]
 8000c64:	685a      	ldr	r2, [r3, #4]
 8000c66:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
 8000c6a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000c6e:	605a      	str	r2, [r3, #4]
  }
 
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000c70:	2000      	movs	r0, #0
 8000c72:	f000 fa16 	bl	80010a2 <HAL_InitTick>
  
  return HAL_OK;
 8000c76:	2000      	movs	r0, #0
}
 8000c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	08001250 	.word	0x08001250
 8000c80:	40021000 	.word	0x40021000

08000c84 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8000c84:	4a13      	ldr	r2, [pc, #76]	; (8000cd4 <HAL_RCC_GetSysClockFreq+0x50>)
 8000c86:	6853      	ldr	r3, [r2, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000c88:	f003 010c 	and.w	r1, r3, #12
 8000c8c:	2908      	cmp	r1, #8
 8000c8e:	4611      	mov	r1, r2
 8000c90:	d11e      	bne.n	8000cd0 <HAL_RCC_GetSysClockFreq+0x4c>
 8000c92:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000c96:	fa92 f2a2 	rbit	r2, r2
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000c9a:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca6:	480c      	ldr	r0, [pc, #48]	; (8000cd8 <HAL_RCC_GetSysClockFreq+0x54>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000ca8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000caa:	5c82      	ldrb	r2, [r0, r2]
 8000cac:	200f      	movs	r0, #15
 8000cae:	fa90 f0a0 	rbit	r0, r0
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000cb2:	fab0 f080 	clz	r0, r0
 8000cb6:	f001 010f 	and.w	r1, r1, #15
 8000cba:	40c1      	lsrs	r1, r0
 8000cbc:	4807      	ldr	r0, [pc, #28]	; (8000cdc <HAL_RCC_GetSysClockFreq+0x58>)
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8000cbe:	03db      	lsls	r3, r3, #15
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000cc0:	5c41      	ldrb	r1, [r0, r1]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000cc2:	bf4a      	itet	mi
 8000cc4:	4806      	ldrmi	r0, [pc, #24]	; (8000ce0 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1) * pllmul;
 8000cc6:	4807      	ldrpl	r0, [pc, #28]	; (8000ce4 <HAL_RCC_GetSysClockFreq+0x60>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000cc8:	fbb0 f0f1 	udivmi	r0, r0, r1
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1) * pllmul;
 8000ccc:	4350      	muls	r0, r2
 8000cce:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000cd0:	4803      	ldr	r0, [pc, #12]	; (8000ce0 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000cd2:	4770      	bx	lr
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	08001298 	.word	0x08001298
 8000cdc:	08001288 	.word	0x08001288
 8000ce0:	007a1200 	.word	0x007a1200
 8000ce4:	003d0900 	.word	0x003d0900

08000ce8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000ce8:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8000cea:	f7ff ffcb 	bl	8000c84 <HAL_RCC_GetSysClockFreq>
 8000cee:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <HAL_RCC_GetHCLKFreq+0x28>)
 8000cf0:	22f0      	movs	r2, #240	; 0xf0
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	fa92 f2a2 	rbit	r2, r2
 8000cf8:	fab2 f282 	clz	r2, r2
 8000cfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d00:	40d3      	lsrs	r3, r2
 8000d02:	4a04      	ldr	r2, [pc, #16]	; (8000d14 <HAL_RCC_GetHCLKFreq+0x2c>)
 8000d04:	5cd3      	ldrb	r3, [r2, r3]
 8000d06:	40d8      	lsrs	r0, r3
 8000d08:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <HAL_RCC_GetHCLKFreq+0x30>)
 8000d0a:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8000d0c:	bd08      	pop	{r3, pc}
 8000d0e:	bf00      	nop
 8000d10:	40021000 	.word	0x40021000
 8000d14:	080012a8 	.word	0x080012a8
 8000d18:	20000000 	.word	0x20000000

08000d1c <HAL_GPIO_Init>:
  uint32_t position = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000d1c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000d24:	4604      	mov	r4, r0
 8000d26:	460d      	mov	r5, r1
  uint32_t position = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000d28:	d016      	beq.n	8000d58 <HAL_GPIO_Init+0x3c>
 8000d2a:	4b8f      	ldr	r3, [pc, #572]	; (8000f68 <HAL_GPIO_Init+0x24c>)
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	d013      	beq.n	8000d58 <HAL_GPIO_Init+0x3c>
 8000d30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d34:	4298      	cmp	r0, r3
 8000d36:	d00f      	beq.n	8000d58 <HAL_GPIO_Init+0x3c>
 8000d38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	d00b      	beq.n	8000d58 <HAL_GPIO_Init+0x3c>
 8000d40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d44:	4298      	cmp	r0, r3
 8000d46:	d007      	beq.n	8000d58 <HAL_GPIO_Init+0x3c>
 8000d48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d4c:	4298      	cmp	r0, r3
 8000d4e:	d003      	beq.n	8000d58 <HAL_GPIO_Init+0x3c>
 8000d50:	4886      	ldr	r0, [pc, #536]	; (8000f6c <HAL_GPIO_Init+0x250>)
 8000d52:	21c5      	movs	r1, #197	; 0xc5
 8000d54:	f7ff fad6 	bl	8000304 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000d58:	882b      	ldrh	r3, [r5, #0]
 8000d5a:	b91b      	cbnz	r3, 8000d64 <HAL_GPIO_Init+0x48>
 8000d5c:	4883      	ldr	r0, [pc, #524]	; (8000f6c <HAL_GPIO_Init+0x250>)
 8000d5e:	21c6      	movs	r1, #198	; 0xc6
 8000d60:	f7ff fad0 	bl	8000304 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000d64:	686b      	ldr	r3, [r5, #4]
 8000d66:	2b03      	cmp	r3, #3
 8000d68:	d917      	bls.n	8000d9a <HAL_GPIO_Init+0x7e>
 8000d6a:	f1a3 0211 	sub.w	r2, r3, #17
 8000d6e:	2a01      	cmp	r2, #1
 8000d70:	d913      	bls.n	8000d9a <HAL_GPIO_Init+0x7e>
 8000d72:	497f      	ldr	r1, [pc, #508]	; (8000f70 <HAL_GPIO_Init+0x254>)
 8000d74:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8000d78:	428a      	cmp	r2, r1
 8000d7a:	d00e      	beq.n	8000d9a <HAL_GPIO_Init+0x7e>
 8000d7c:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 8000d80:	428b      	cmp	r3, r1
 8000d82:	d00a      	beq.n	8000d9a <HAL_GPIO_Init+0x7e>
 8000d84:	f5a1 2170 	sub.w	r1, r1, #983040	; 0xf0000
 8000d88:	428a      	cmp	r2, r1
 8000d8a:	d006      	beq.n	8000d9a <HAL_GPIO_Init+0x7e>
 8000d8c:	4a79      	ldr	r2, [pc, #484]	; (8000f74 <HAL_GPIO_Init+0x258>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d003      	beq.n	8000d9a <HAL_GPIO_Init+0x7e>
 8000d92:	4876      	ldr	r0, [pc, #472]	; (8000f6c <HAL_GPIO_Init+0x250>)
 8000d94:	21c7      	movs	r1, #199	; 0xc7
 8000d96:	f7ff fab5 	bl	8000304 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000d9a:	68ab      	ldr	r3, [r5, #8]
 8000d9c:	2b02      	cmp	r3, #2
 8000d9e:	d903      	bls.n	8000da8 <HAL_GPIO_Init+0x8c>
 8000da0:	4872      	ldr	r0, [pc, #456]	; (8000f6c <HAL_GPIO_Init+0x250>)
 8000da2:	21c8      	movs	r1, #200	; 0xc8
 8000da4:	f7ff faae 	bl	8000304 <assert_failed>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000da8:	2600      	movs	r6, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 8000daa:	682b      	ldr	r3, [r5, #0]
 8000dac:	fa33 f206 	lsrs.w	r2, r3, r6
 8000db0:	f000 80d7 	beq.w	8000f62 <HAL_GPIO_Init+0x246>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8000db4:	2701      	movs	r7, #1
 8000db6:	40b7      	lsls	r7, r6

    if(iocurrent)
 8000db8:	401f      	ands	r7, r3
 8000dba:	f000 80d0 	beq.w	8000f5e <HAL_GPIO_Init+0x242>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dbe:	686b      	ldr	r3, [r5, #4]
 8000dc0:	f023 0310 	bic.w	r3, r3, #16
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d133      	bne.n	8000e30 <HAL_GPIO_Init+0x114>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8000dc8:	f1b4 4f90 	cmp.w	r4, #1207959552	; 0x48000000
 8000dcc:	d016      	beq.n	8000dfc <HAL_GPIO_Init+0xe0>
 8000dce:	4b66      	ldr	r3, [pc, #408]	; (8000f68 <HAL_GPIO_Init+0x24c>)
 8000dd0:	429c      	cmp	r4, r3
 8000dd2:	d013      	beq.n	8000dfc <HAL_GPIO_Init+0xe0>
 8000dd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000dd8:	429c      	cmp	r4, r3
 8000dda:	d00f      	beq.n	8000dfc <HAL_GPIO_Init+0xe0>
 8000ddc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000de0:	429c      	cmp	r4, r3
 8000de2:	d00b      	beq.n	8000dfc <HAL_GPIO_Init+0xe0>
 8000de4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000de8:	429c      	cmp	r4, r3
 8000dea:	d007      	beq.n	8000dfc <HAL_GPIO_Init+0xe0>
 8000dec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000df0:	429c      	cmp	r4, r3
 8000df2:	d003      	beq.n	8000dfc <HAL_GPIO_Init+0xe0>
 8000df4:	485d      	ldr	r0, [pc, #372]	; (8000f6c <HAL_GPIO_Init+0x250>)
 8000df6:	21d7      	movs	r1, #215	; 0xd7
 8000df8:	f7ff fa84 	bl	8000304 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8000dfc:	692b      	ldr	r3, [r5, #16]
 8000dfe:	2b0c      	cmp	r3, #12
 8000e00:	d906      	bls.n	8000e10 <HAL_GPIO_Init+0xf4>
 8000e02:	3b0e      	subs	r3, #14
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d903      	bls.n	8000e10 <HAL_GPIO_Init+0xf4>
 8000e08:	4858      	ldr	r0, [pc, #352]	; (8000f6c <HAL_GPIO_Init+0x250>)
 8000e0a:	21d8      	movs	r1, #216	; 0xd8
 8000e0c:	f7ff fa7a 	bl	8000304 <assert_failed>
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000e10:	08f3      	lsrs	r3, r6, #3
 8000e12:	eb04 0383 	add.w	r3, r4, r3, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e16:	f006 0207 	and.w	r2, r6, #7
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000e1a:	6a19      	ldr	r1, [r3, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e1c:	0092      	lsls	r2, r2, #2
 8000e1e:	200f      	movs	r0, #15
 8000e20:	4090      	lsls	r0, r2
 8000e22:	ea21 0000 	bic.w	r0, r1, r0
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000e26:	6929      	ldr	r1, [r5, #16]
 8000e28:	4091      	lsls	r1, r2
 8000e2a:	ea40 0201 	orr.w	r2, r0, r1
        GPIOx->AFR[position >> 3] = temp;
 8000e2e:	621a      	str	r2, [r3, #32]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e30:	686b      	ldr	r3, [r5, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e32:	6821      	ldr	r1, [r4, #0]
 8000e34:	ea4f 0846 	mov.w	r8, r6, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000e38:	f04f 0903 	mov.w	r9, #3
 8000e3c:	fa09 f908 	lsl.w	r9, r9, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e40:	f003 0203 	and.w	r2, r3, #3
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000e44:	ea6f 0909 	mvn.w	r9, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e48:	f023 0310 	bic.w	r3, r3, #16
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000e4c:	ea09 0101 	and.w	r1, r9, r1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e50:	fa02 f208 	lsl.w	r2, r2, r8
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e54:	3b01      	subs	r3, #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e56:	430a      	orrs	r2, r1
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e58:	2b01      	cmp	r3, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;
 8000e5a:	6022      	str	r2, [r4, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e5c:	d81b      	bhi.n	8000e96 <HAL_GPIO_Init+0x17a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000e5e:	68eb      	ldr	r3, [r5, #12]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d905      	bls.n	8000e70 <HAL_GPIO_Init+0x154>
 8000e64:	2b03      	cmp	r3, #3
 8000e66:	d003      	beq.n	8000e70 <HAL_GPIO_Init+0x154>
 8000e68:	4840      	ldr	r0, [pc, #256]	; (8000f6c <HAL_GPIO_Init+0x250>)
 8000e6a:	21ec      	movs	r1, #236	; 0xec
 8000e6c:	f7ff fa4a 	bl	8000304 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e70:	68a2      	ldr	r2, [r4, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
        temp |= (GPIO_Init->Speed << (position * 2));
 8000e72:	68eb      	ldr	r3, [r5, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e74:	ea09 0202 	and.w	r2, r9, r2
        temp |= (GPIO_Init->Speed << (position * 2));
 8000e78:	fa03 f308 	lsl.w	r3, r3, r8
 8000e7c:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
 8000e7e:	60a3      	str	r3, [r4, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000e80:	686b      	ldr	r3, [r5, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
        temp |= (GPIO_Init->Speed << (position * 2));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e82:	6861      	ldr	r1, [r4, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e84:	2201      	movs	r2, #1
 8000e86:	40b2      	lsls	r2, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000e88:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e8c:	ea21 0202 	bic.w	r2, r1, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000e90:	40b3      	lsls	r3, r6
 8000e92:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
 8000e94:	6063      	str	r3, [r4, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e96:	68e3      	ldr	r3, [r4, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2));
      GPIOx->PUPDR = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e98:	686a      	ldr	r2, [r5, #4]
        GPIOx->OTYPER = temp;
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e9a:	ea09 0903 	and.w	r9, r9, r3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000e9e:	68ab      	ldr	r3, [r5, #8]
 8000ea0:	fa03 f808 	lsl.w	r8, r3, r8
 8000ea4:	ea49 0308 	orr.w	r3, r9, r8
      GPIOx->PUPDR = temp;
 8000ea8:	60e3      	str	r3, [r4, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000eaa:	00d3      	lsls	r3, r2, #3
 8000eac:	d557      	bpl.n	8000f5e <HAL_GPIO_Init+0x242>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eae:	4b32      	ldr	r3, [pc, #200]	; (8000f78 <HAL_GPIO_Init+0x25c>)
 8000eb0:	6999      	ldr	r1, [r3, #24]
 8000eb2:	f041 0101 	orr.w	r1, r1, #1
 8000eb6:	6199      	str	r1, [r3, #24]
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	f026 0103 	bic.w	r1, r6, #3
 8000ebe:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 8000eca:	9301      	str	r3, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000ecc:	f006 0003 	and.w	r0, r6, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed0:	9b01      	ldr	r3, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2];
 8000ed2:	688b      	ldr	r3, [r1, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000ed4:	0080      	lsls	r0, r0, #2
 8000ed6:	f04f 0c0f 	mov.w	ip, #15
 8000eda:	fa0c fc00 	lsl.w	ip, ip, r0
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000ede:	f1b4 4f90 	cmp.w	r4, #1207959552	; 0x48000000
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000ee2:	ea23 0c0c 	bic.w	ip, r3, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000ee6:	d011      	beq.n	8000f0c <HAL_GPIO_Init+0x1f0>
 8000ee8:	4b1f      	ldr	r3, [pc, #124]	; (8000f68 <HAL_GPIO_Init+0x24c>)
 8000eea:	429c      	cmp	r4, r3
 8000eec:	d010      	beq.n	8000f10 <HAL_GPIO_Init+0x1f4>
 8000eee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000ef2:	429c      	cmp	r4, r3
 8000ef4:	d00e      	beq.n	8000f14 <HAL_GPIO_Init+0x1f8>
 8000ef6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000efa:	429c      	cmp	r4, r3
 8000efc:	d00c      	beq.n	8000f18 <HAL_GPIO_Init+0x1fc>
 8000efe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f02:	429c      	cmp	r4, r3
 8000f04:	bf14      	ite	ne
 8000f06:	2305      	movne	r3, #5
 8000f08:	2304      	moveq	r3, #4
 8000f0a:	e006      	b.n	8000f1a <HAL_GPIO_Init+0x1fe>
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	e004      	b.n	8000f1a <HAL_GPIO_Init+0x1fe>
 8000f10:	2301      	movs	r3, #1
 8000f12:	e002      	b.n	8000f1a <HAL_GPIO_Init+0x1fe>
 8000f14:	2302      	movs	r3, #2
 8000f16:	e000      	b.n	8000f1a <HAL_GPIO_Init+0x1fe>
 8000f18:	2303      	movs	r3, #3
 8000f1a:	4083      	lsls	r3, r0
 8000f1c:	ea43 030c 	orr.w	r3, r3, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f20:	608b      	str	r3, [r1, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f22:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <HAL_GPIO_Init+0x260>)
 8000f24:	6818      	ldr	r0, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 8000f26:	43f9      	mvns	r1, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f28:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        {
          temp |= iocurrent;
 8000f2c:	bf14      	ite	ne
 8000f2e:	4338      	orrne	r0, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8000f30:	4008      	andeq	r0, r1
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8000f32:	6018      	str	r0, [r3, #0]

        temp = EXTI->EMR;
 8000f34:	6858      	ldr	r0, [r3, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f36:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        {
          temp |= iocurrent;
 8000f3a:	bf14      	ite	ne
 8000f3c:	4338      	orrne	r0, r7
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 8000f3e:	4008      	andeq	r0, r1
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8000f40:	6058      	str	r0, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f42:	6898      	ldr	r0, [r3, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f44:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
        {
          temp |= iocurrent;
 8000f48:	bf14      	ite	ne
 8000f4a:	4338      	orrne	r0, r7
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8000f4c:	4008      	andeq	r0, r1
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8000f4e:	6098      	str	r0, [r3, #8]

        temp = EXTI->FTSR;
 8000f50:	68d8      	ldr	r0, [r3, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f52:	0292      	lsls	r2, r2, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8000f54:	bf54      	ite	pl
 8000f56:	ea01 0700 	andpl.w	r7, r1, r0
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8000f5a:	4307      	orrmi	r7, r0
        }
        EXTI->FTSR = temp;
 8000f5c:	60df      	str	r7, [r3, #12]
      }
    }
    
    position++;
 8000f5e:	3601      	adds	r6, #1
 8000f60:	e723      	b.n	8000daa <HAL_GPIO_Init+0x8e>
  }
}
 8000f62:	b003      	add	sp, #12
 8000f64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f68:	48000400 	.word	0x48000400
 8000f6c:	080012b8 	.word	0x080012b8
 8000f70:	10110000 	.word	0x10110000
 8000f74:	10220000 	.word	0x10220000
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40010400 	.word	0x40010400

08000f80 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000f80:	1ec3      	subs	r3, r0, #3
 8000f82:	2b04      	cmp	r3, #4
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f84:	b510      	push	{r4, lr}
 8000f86:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000f88:	d903      	bls.n	8000f92 <HAL_NVIC_SetPriorityGrouping+0x12>
 8000f8a:	4809      	ldr	r0, [pc, #36]	; (8000fb0 <HAL_NVIC_SetPriorityGrouping+0x30>)
 8000f8c:	21bb      	movs	r1, #187	; 0xbb
 8000f8e:	f7ff f9b9 	bl	8000304 <assert_failed>
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f92:	4a08      	ldr	r2, [pc, #32]	; (8000fb4 <HAL_NVIC_SetPriorityGrouping+0x34>)
 8000f94:	68d1      	ldr	r1, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8000f96:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f9a:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa4:	f004 0407 	and.w	r4, r4, #7

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000fa8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000fac:	60d3      	str	r3, [r2, #12]
 8000fae:	bd10      	pop	{r4, pc}
 8000fb0:	080012f1 	.word	0x080012f1
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t prioritygroup = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000fb8:	2a0f      	cmp	r2, #15
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fba:	b570      	push	{r4, r5, r6, lr}
 8000fbc:	4604      	mov	r4, r0
 8000fbe:	460d      	mov	r5, r1
 8000fc0:	4616      	mov	r6, r2
  uint32_t prioritygroup = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000fc2:	d903      	bls.n	8000fcc <HAL_NVIC_SetPriority+0x14>
 8000fc4:	481a      	ldr	r0, [pc, #104]	; (8001030 <HAL_NVIC_SetPriority+0x78>)
 8000fc6:	21d3      	movs	r1, #211	; 0xd3
 8000fc8:	f7ff f99c 	bl	8000304 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000fcc:	2d0f      	cmp	r5, #15
 8000fce:	d903      	bls.n	8000fd8 <HAL_NVIC_SetPriority+0x20>
 8000fd0:	4817      	ldr	r0, [pc, #92]	; (8001030 <HAL_NVIC_SetPriority+0x78>)
 8000fd2:	21d4      	movs	r1, #212	; 0xd4
 8000fd4:	f7ff f996 	bl	8000304 <assert_failed>

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd8:	4b16      	ldr	r3, [pc, #88]	; (8001034 <HAL_NVIC_SetPriority+0x7c>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	f3c3 2302 	ubfx	r3, r3, #8, #3
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe0:	1d1a      	adds	r2, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe2:	f1c3 0007 	rsb	r0, r3, #7
 8000fe6:	2804      	cmp	r0, #4
 8000fe8:	bf28      	it	cs
 8000fea:	2004      	movcs	r0, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fec:	2a06      	cmp	r2, #6
 8000fee:	bf8c      	ite	hi
 8000ff0:	3b03      	subhi	r3, #3
 8000ff2:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	fa02 f103 	lsl.w	r1, r2, r3

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ffa:	4082      	lsls	r2, r0
 8000ffc:	3a01      	subs	r2, #1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ffe:	3901      	subs	r1, #1

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	4015      	ands	r5, r2
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001002:	400e      	ands	r6, r1

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	fa05 f303 	lsl.w	r3, r5, r3
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8001008:	4333      	orrs	r3, r6
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)IRQn < 0) {
 800100a:	2c00      	cmp	r4, #0
 800100c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001010:	da05      	bge.n	800101e <HAL_NVIC_SetPriority+0x66>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001012:	b2de      	uxtb	r6, r3
 8001014:	f004 040f 	and.w	r4, r4, #15
 8001018:	4b07      	ldr	r3, [pc, #28]	; (8001038 <HAL_NVIC_SetPriority+0x80>)
 800101a:	551e      	strb	r6, [r3, r4]
 800101c:	bd70      	pop	{r4, r5, r6, pc}
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101e:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
 8001022:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
 8001026:	b2db      	uxtb	r3, r3
 8001028:	f884 3300 	strb.w	r3, [r4, #768]	; 0x300
 800102c:	bd70      	pop	{r4, r5, r6, pc}
 800102e:	bf00      	nop
 8001030:	080012f1 	.word	0x080012f1
 8001034:	e000ed00 	.word	0xe000ed00
 8001038:	e000ed14 	.word	0xe000ed14

0800103c <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 800103c:	3801      	subs	r0, #1
 800103e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001042:	d20a      	bcs.n	800105a <HAL_SYSTICK_Config+0x1e>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_SYSTICK_Config+0x24>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)IRQn < 0) {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001046:	4a07      	ldr	r2, [pc, #28]	; (8001064 <HAL_SYSTICK_Config+0x28>)
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001048:	6058      	str	r0, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)IRQn < 0) {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104a:	21f0      	movs	r1, #240	; 0xf0
 800104c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001050:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001052:	2207      	movs	r2, #7
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001054:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	4770      	bx	lr
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 800105a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000e010 	.word	0xe000e010
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <HAL_SYSTICK_CLKSourceConfig>:
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 8001068:	2804      	cmp	r0, #4
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800106a:	b510      	push	{r4, lr}
 800106c:	4c08      	ldr	r4, [pc, #32]	; (8001090 <HAL_SYSTICK_CLKSourceConfig+0x28>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 800106e:	d009      	beq.n	8001084 <HAL_SYSTICK_CLKSourceConfig+0x1c>
 8001070:	b120      	cbz	r0, 800107c <HAL_SYSTICK_CLKSourceConfig+0x14>
 8001072:	4808      	ldr	r0, [pc, #32]	; (8001094 <HAL_SYSTICK_CLKSourceConfig+0x2c>)
 8001074:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8001078:	f7ff f944 	bl	8000304 <assert_failed>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800107c:	6823      	ldr	r3, [r4, #0]
 800107e:	f023 0304 	bic.w	r3, r3, #4
 8001082:	e002      	b.n	800108a <HAL_SYSTICK_CLKSourceConfig+0x22>
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001084:	6823      	ldr	r3, [r4, #0]
 8001086:	f043 0304 	orr.w	r3, r3, #4
 800108a:	6023      	str	r3, [r4, #0]
 800108c:	bd10      	pop	{r4, pc}
 800108e:	bf00      	nop
 8001090:	e000e010 	.word	0xe000e010
 8001094:	080012f1 	.word	0x080012f1

08001098 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001098:	4770      	bx	lr

0800109a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800109a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800109c:	f7ff fffc 	bl	8001098 <HAL_SYSTICK_Callback>
 80010a0:	bd08      	pop	{r3, pc}

080010a2 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a2:	b510      	push	{r4, lr}
 80010a4:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80010a6:	f7ff fe1f 	bl	8000ce8 <HAL_RCC_GetHCLKFreq>
 80010aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ae:	fbb0 f0f3 	udiv	r0, r0, r3
 80010b2:	f7ff ffc3 	bl	800103c <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80010b6:	f04f 30ff 	mov.w	r0, #4294967295
 80010ba:	4621      	mov	r1, r4
 80010bc:	2200      	movs	r2, #0
 80010be:	f7ff ff7b 	bl	8000fb8 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80010c2:	2000      	movs	r0, #0
 80010c4:	bd10      	pop	{r4, pc}
	...

080010c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c8:	b508      	push	{r3, lr}
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ca:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <HAL_Init+0x20>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	f042 0210 	orr.w	r2, r2, #16
 80010d2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d4:	2003      	movs	r0, #3
 80010d6:	f7ff ff53 	bl	8000f80 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010da:	2000      	movs	r0, #0
 80010dc:	f7ff ffe1 	bl	80010a2 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e0:	f7ff f87a 	bl	80001d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80010e4:	2000      	movs	r0, #0
 80010e6:	bd08      	pop	{r3, pc}
 80010e8:	40022000 	.word	0x40022000

080010ec <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80010ec:	4b02      	ldr	r3, [pc, #8]	; (80010f8 <HAL_IncTick+0xc>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	3201      	adds	r2, #1
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	20000020 	.word	0x20000020

080010fc <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80010fc:	4b01      	ldr	r3, [pc, #4]	; (8001104 <HAL_GetTick+0x8>)
 80010fe:	6818      	ldr	r0, [r3, #0]
}
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	20000020 	.word	0x20000020

08001108 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001108:	b513      	push	{r0, r1, r4, lr}
 800110a:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 800110c:	f7ff fff6 	bl	80010fc <HAL_GetTick>
 8001110:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8001112:	f7ff fff3 	bl	80010fc <HAL_GetTick>
 8001116:	9b01      	ldr	r3, [sp, #4]
 8001118:	1b00      	subs	r0, r0, r4
 800111a:	4298      	cmp	r0, r3
 800111c:	d3f9      	bcc.n	8001112 <HAL_Delay+0xa>
  {
  }
}
 800111e:	b002      	add	sp, #8
 8001120:	bd10      	pop	{r4, pc}
	...

08001124 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001124:	4a15      	ldr	r2, [pc, #84]	; (800117c <SystemInit+0x58>)
 8001126:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800112a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800112e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001132:	4b13      	ldr	r3, [pc, #76]	; (8001180 <SystemInit+0x5c>)
 8001134:	6819      	ldr	r1, [r3, #0]
 8001136:	f041 0101 	orr.w	r1, r1, #1
 800113a:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 800113c:	6858      	ldr	r0, [r3, #4]
 800113e:	4911      	ldr	r1, [pc, #68]	; (8001184 <SystemInit+0x60>)
 8001140:	4001      	ands	r1, r0
 8001142:	6059      	str	r1, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001144:	6819      	ldr	r1, [r3, #0]
 8001146:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 800114a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800114e:	6019      	str	r1, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001150:	6819      	ldr	r1, [r3, #0]
 8001152:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8001156:	6019      	str	r1, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001158:	6859      	ldr	r1, [r3, #4]
 800115a:	f421 01fe 	bic.w	r1, r1, #8323072	; 0x7f0000
 800115e:	6059      	str	r1, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8001160:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001162:	f021 010f 	bic.w	r1, r1, #15
 8001166:	62d9      	str	r1, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8001168:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800116a:	4907      	ldr	r1, [pc, #28]	; (8001188 <SystemInit+0x64>)
 800116c:	4001      	ands	r1, r0
 800116e:	6319      	str	r1, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001170:	2100      	movs	r1, #0
 8001172:	6099      	str	r1, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001178:	6093      	str	r3, [r2, #8]
 800117a:	4770      	bx	lr
 800117c:	e000ed00 	.word	0xe000ed00
 8001180:	40021000 	.word	0x40021000
 8001184:	f87fc00c 	.word	0xf87fc00c
 8001188:	ff00fccc 	.word	0xff00fccc

0800118c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800118c:	f8df d040 	ldr.w	sp, [pc, #64]	; 80011d0 <LoopForever+0x6>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001190:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001192:	f000 b804 	b.w	800119e <LoopCopyDataInit>

08001196 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001196:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <LoopForever+0xa>)
	ldr	r3, [r3, r1]
 8001198:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800119a:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800119c:	3104      	adds	r1, #4

0800119e <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800119e:	480e      	ldr	r0, [pc, #56]	; (80011d8 <LoopForever+0xe>)
	ldr	r3, =_edata
 80011a0:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <LoopForever+0x12>)
	adds	r2, r0, r1
 80011a2:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80011a4:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80011a6:	f4ff aff6 	bcc.w	8001196 <CopyDataInit>
	ldr	r2, =_sbss
 80011aa:	4a0d      	ldr	r2, [pc, #52]	; (80011e0 <LoopForever+0x16>)
	b	LoopFillZerobss
 80011ac:	f000 b803 	b.w	80011b6 <LoopFillZerobss>

080011b0 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80011b0:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80011b2:	f842 3b04 	str.w	r3, [r2], #4

080011b6 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80011b6:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <LoopForever+0x1a>)
	cmp	r2, r3
 80011b8:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80011ba:	f4ff aff9 	bcc.w	80011b0 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011be:	f7ff ffb1 	bl	8001124 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011c2:	f000 f813 	bl	80011ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011c6:	f7ff f889 	bl	80002dc <main>

080011ca <LoopForever>:

LoopForever:
    b LoopForever
 80011ca:	f7ff bffe 	b.w	80011ca <LoopForever>
 80011ce:	0000      	.short	0x0000

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011d0:	2000a000 	.word	0x2000a000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 80011d4:	08001334 	.word	0x08001334
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 80011d8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80011dc:	20000004 	.word	0x20000004
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 80011e0:	20000004 	.word	0x20000004
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 80011e4:	20000024 	.word	0x20000024

080011e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011e8:	f7ff bffe 	b.w	80011e8 <ADC1_2_IRQHandler>

080011ec <__libc_init_array>:
 80011ec:	b570      	push	{r4, r5, r6, lr}
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <__libc_init_array+0x3c>)
 80011f0:	4d0e      	ldr	r5, [pc, #56]	; (800122c <__libc_init_array+0x40>)
 80011f2:	1aed      	subs	r5, r5, r3
 80011f4:	10ad      	asrs	r5, r5, #2
 80011f6:	2400      	movs	r4, #0
 80011f8:	461e      	mov	r6, r3
 80011fa:	42ac      	cmp	r4, r5
 80011fc:	d004      	beq.n	8001208 <__libc_init_array+0x1c>
 80011fe:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8001202:	4790      	blx	r2
 8001204:	3401      	adds	r4, #1
 8001206:	e7f8      	b.n	80011fa <__libc_init_array+0xe>
 8001208:	f000 f816 	bl	8001238 <_init>
 800120c:	4d08      	ldr	r5, [pc, #32]	; (8001230 <__libc_init_array+0x44>)
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <__libc_init_array+0x48>)
 8001210:	1aed      	subs	r5, r5, r3
 8001212:	10ad      	asrs	r5, r5, #2
 8001214:	2400      	movs	r4, #0
 8001216:	461e      	mov	r6, r3
 8001218:	42ac      	cmp	r4, r5
 800121a:	d004      	beq.n	8001226 <__libc_init_array+0x3a>
 800121c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8001220:	4790      	blx	r2
 8001222:	3401      	adds	r4, #1
 8001224:	e7f8      	b.n	8001218 <__libc_init_array+0x2c>
 8001226:	bd70      	pop	{r4, r5, r6, pc}
 8001228:	0800132c 	.word	0x0800132c
 800122c:	0800132c 	.word	0x0800132c
 8001230:	08001330 	.word	0x08001330
 8001234:	0800132c 	.word	0x0800132c

08001238 <_init>:
 8001238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800123a:	bf00      	nop
 800123c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800123e:	bc08      	pop	{r3}
 8001240:	469e      	mov	lr, r3
 8001242:	4770      	bx	lr

08001244 <_fini>:
 8001244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001246:	bf00      	nop
 8001248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800124a:	bc08      	pop	{r3}
 800124c:	469e      	mov	lr, r3
 800124e:	4770      	bx	lr
